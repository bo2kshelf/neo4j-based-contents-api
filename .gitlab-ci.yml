stages:
  - lint
  - build
  - test
  - deploy

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

build:
  stage: build
  image: node:14
  cache: &npm-cache
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - .yarn
  script:
    - &npm-install yarn install --frozen-lockfile --cache-folder .yarn
    - yarn run build
  artifacts:
    paths:
      - ./dist

eslint:
  stage: lint
  image: node:14
  cache: *npm-cache
  script:
    - *npm-install
    - yarn run lint:eslint

prettier:
  stage: lint
  image: node:14
  cache: *npm-cache
  script:
    - *npm-install
    - yarn run lint:prettier

hadolint:
  stage: lint
  image: hadolint/hadolint:latest
  script:
    - hadolint Dockerfile

ts-check:
  stage: lint
  image: node:14
  cache: *npm-cache
  script:
    - *npm-install
    - yarn run ts-check

test-small:
  stage: test
  image: node:14
  cache: *npm-cache
  script:
    - *npm-install
    - yarn run test:small --ci
  artifacts:
    paths:
      - coverage/small
    reports:
      junit: coverage/small/junit.xml

test-medium:
  stage: test
  image: node:14
  cache: *npm-cache
  script:
    - *npm-install
    - yarn run test:medium --ci
  artifacts:
    paths:
      - coverage/medium
    reports:
      junit: coverage/medium/junit.xml

test-large:
  stage: test
  image: node:14
  cache: *npm-cache
  services:
    - name: neo4j:4.2.3
      alias: neo4j
  variables:
    NEO4J_TEST_URL: bolt://neo4j:7687
    NEO4J_AUTH: none
  script:
    - *npm-install
    - yarn run test:large --ci
  artifacts:
    paths:
      - coverage/large
    reports:
      junit: coverage/large/junit.xml

test-e2e:
  stage: test
  image: node:14
  cache: *npm-cache
  needs:
    - job: build
      artifacts: true
  services:
    - name: neo4j:4.2.3
      alias: neo4j
  variables:
    NEO4J_TEST_URL: bolt://neo4j:7687
    NEO4J_AUTH: none
  script:
    - *npm-install
    - yarn run test:e2e --ci

deploy_develop:
  stage: deploy
  image: docker
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
  script:
    - docker build -t $CI_REGISTRY_IMAGE:develop -t $CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:develop
    - docker push $CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA

deploy_merge_requests:
  stage: deploy
  image: docker
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
      when: on_success
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_SOURCE_BRANCH_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
